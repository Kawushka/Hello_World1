# 1. Создать с помощью матрицы таблицу умножения с корректным выводом на экран.
# Дополнительно можно добавить сетку из символов | —, которая будет отделять числа.

# for i in range(1,11):
#     for j in range(1,11):
#         # print(f'{i*j :4}', end=' | ')
#         if i*j < 10: print(i*j, end='|   ')
#         elif i * j < 100: print(i * j, end='|  ')
#         else: print(i * j, end='| ')
#     print('\n','________________________________________________')


# 2. Напишите код с конструкцией try-except-finally с наглядной демонстрацией,
# зачем использовать finally, если можно просто написать код после конструкции try-except
#
# try:
#     a = int(input('Введите число: '))
#     print(1/a)
# except ValueError: print('Неверные данные!')
# finally: print('123456') #выводит на печать, даже в случае прерывания программы
# print('123') #не будет выводить на печать в случае прерывания


                        #Файлы и файловая система
# Файл - набор данных, который хранится в виде последовательности битов на компьютере.
# Информация в файлах хранится в куче данных (структура данных).

#Типы файлов в Python:
#1. текстовые
#2. бинарные

#текстовые файлы
# .txt - обычный текстовый документ, .rtf - формат обогащенного текста

#бинарные файлы - данные в зашифрованном виде из 0 и 1
# 01100011 01100011 01100011 01100011 01100011 01100011 01100011 01100011
# .bin - расширение бинарных файлов


#Операции с файлами:
#1. Открыть файл
#2. Запись, чтение, удаление информации и т.д.
#3. Закрытие файла

#Открытие файла
# f = open('file_name', access_mode)
# file_name - имя открываемого файла
# access_mode - режим открытия файла. Необязательный аргумент.
# если не указать, то по умолчанию файл откроется в режиме чтения 'r'

#Режимы открытия файла:
# r - только для чтения
# w - только для записи. Создаст новый файл с указанным именем, если такого еще нет
# r+ - для чтения и записи
# w+ - для чтения и записи. Создаст новый файл с указанным именем, если его нет
# a - откроет файл для добавления нового содержимого в конец файла.
# Создаст новый файл для записи с указанным именем, если такого еще нет
# a+ - откроет файл для добавления нового содержимого в конец файла.
# # Создаст новый файл для чтения и записи с указанным именем, если такого еще нет

#Отличие w от a - w ставит курсор в начале, а ставит курсор в конце файла
# f = open('my_file.txt', 'r') #открываем файл из папки нашего проекта для чтения
# print(*f) #выводим содержимое файла
# f.close() #закрывает файл
# print(*f) #вызовет ошибку из-за печати закрытого файла

# f1 = open('C:/Users/folder_1.txt', 'r') #открываем файл из любой директории
# print(*f1)
# f1.close()

# f - это переменная-указатель на какой-то текстовый файл

# f = open('my_file.txt', 'r')
# try:
#     print(*f)
# finally:
#     f.close()
# #Можно использовать try-finally для работы и закрытия файла

#конструкция with-open-as самая простая для работы и закрытия файла
# with open('my_file.txt') as f:
#     # с открытым файлом my_file.txt для чтения в качестве переменной f сделать следующее:
#     print(*f)

#Чтение файла read(), readline(), readlines()
# file.read(size) - file - название объекта, read - функция для чтения, size - сколько символов прочитать
# f = open('my_file.txt', 'r')
# print(f.read(7)) #печать первых 7 символов файла
# print(f.read(7)) #следующие 7 символов
# f.close()

#readline() читает всю строку, readlines() читает все строки
# x = open('my_file.txt')
#
# print(x.readline()) #печать первой строки
# print(x.readline()) #второй строки
# x.close()
# x = open('my_file.txt')
# print(*x.readlines()) #печать всех строк
# x.close()

# x = open('my_file.txt')
# s = x.readlines()
# print(s[1]) #печать конкретной строки
# x.close()

# x = open('my_file.txt')
# s = x.readlines()
# print('Количество строк файла: ',len(s))
# for i in s:
#     # if i[-1] == '\n': i = i[:-1] #сложный способ
#     i = i.strip() #простой способ. strip убирает в строке пробелы и переносы строк по бокам
#     print(len(i))
# x.close()

#Запись в файл write()
# file.write(string) - string - строка, которую нужно записать в file
# f = open('my_file.txt', 'w') #открыть в режиме записи
# f.write('Hello \nWorld') #будет записано Hello World вместо записей, которые там были
# #Если нужно дописать информацию в конец файла, а не поверх старой, то используется режим 'a'.
# f.close()

#Функция rename() - переименовывает файл
import os #эта библиотека используется для создания файлов, переименования, удаления, перемещения и т.д.
#os.rename(old_name, new_name)
# os.rename('my_file.txt', 'new_file.txt') #сменили название на new_file

# print('Текущая директория нашего проекта: ', os.getcwd()) #где наша директория

# os.mkdir('folder') #в нашем проекте появится папка folder

# os.chdir('folder') #сменили директорию
# print(os.getcwd()) #вывели на печать новую директорию
#
# os.chdir('..') #вернуться в предыдущую директорию
# print(os.getcwd())

# os.makedirs('folder1/folder2/folder3') #создает несколько папок рекурсивно

# os.remove('new_file.txt') #удаление файла

# os.rmdir('folder') #удаляет папку folder
# os.removedirs('folder1/folder2/folder3') #удаляет вложенные папки

#Task_1. В файле записаны слова и числа через пробел или через _.
# Нужно найти сумму всех чисел

# # joefjo 887 hk_78_9
import re
with open('new_file.txt') as f:
    my_str = re.split('_| ',f.readline()) #разбиваем по пробелам и _ с помощью разделителя |
    print(my_str)
count = 0
for i in my_str:
    if i.isdigit(): count += int(i)
print('Summ = ', count)
with open('new_file.txt', 'a') as f:
    f.write(f'\n {count}')