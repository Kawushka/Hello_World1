# 1.	Дан список. Выведите те его элементы, которые встречаются в списке только один раз.

# a = [1,6,'h', 8, 1, 9, 'h','m']
# b = []
# for i in a:
#     if a.count(i) == 1: b.append(i)
# print(*b)

#2. Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу.
# Считается, что любые два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать.

# a = [1,1,1,1,1,1,1,1,2,2]
# 1 1 1 1 1 1 1 1
# 0 1 2 3 4 5 6 7
# 01, 02, 03, 04, 05, 06, 07
# 12, 13,14,15,16,17
# 23, 24,25,26,27
# 34,35,36,37
# 45,46,47
# 56,57
# 67
# count1 = 0
# count2 = 0
# b = set(a)
# for i in b:
#     count1 += a.count(i)
#     for j in range(1,count1):
#         count2 += j
#     count1 = 0
# print(count2)

#3. 3.	Даны два кортежа:
# C_1 = (35, 78,21,37, 2,98, 6, 100, 231)
# C_2 = (45, 21,124,76,5,23,91,234)
# Необходимо определить:
# 1)	Сумма элементов какого из кортежей больше и вывести соответствующее сообщение на экран (Сумма больше в кортеже - ..)
# 2)	Вывести на экран порядковые номера минимальных и максимальных элементов этих кортежей (index).
# if sum(C_1)> sum(C_2): print('C_1 больше')
# elif sum(C_2)> sum(C_1): print('C_2 больше')
# else: print('Суммы равны')
# print(C_1.index(max(C_1))+1)
# print(C_2.index(max(C_2))+1)

#4.
# a = ('An apple a day keeps the doctor away'.lower()).split()
# a = ''.join(a)
# d = {i: a.count(i) for i in a}
# print(d)

#5. Даны два списка чисел.
# Посчитайте, сколько чисел содержится одновременно как в первом списке,
# так и во втором.
# C_1 = [35, 78,21,37, 2,98, 6, 100, 231]
# C_2 = [45, 21,124,76,5,23,91,234]
#
# count = 0
#
# for i in C_1:
#     if i in C_2: count+=1
# print(count)
# print(len(set(C_1)&set(C_2)))

#6. 6.	В текстовый файл построчно записаны фамилия и имя учащихся класса и его оценка за контрольную.
# Вывести на экран всех учащихся, чья оценка меньше 3 баллов и посчитать средний балл по классу
# av = 0
#
# with open('puples.txt', encoding='utf-8') as f:
#     uch = f.readlines()
# for i in uch:
#     a = i.strip()
#     if int(a[-1])<3: print(a)
#     av += int(a[-1])
# print(round(av/len(uch),1))
# print('%.2f' % (av/len(uch)))

# GIT - система контроля версий вашего проекта в Python
# git push - запушить какие-либо изменения (сохранить инофрмацию об этом)
#Github - сайт, куда будем загружать код и информацию о коде
#Bitbucket, GitLab - аналогичные платформы

#commit - чек-пойнт, или точка сохранения изменений, или информация об изменении

# git имеет 4 состояния:
#1. untracked (неотслеживаемое)
#2.modified (измененное)
#3. staged (подготовленное)
#4. committed (закомичен)

# Коммит - объект для управления контроля версий. Он содержит все изменения зя время коммита.
# Все коммиты связаны между собой и имеют односвязный список.

# У каждого коммита есть своя информация - метаданные:
#1. Уникальный номер (id) коммита, по которому можно к нему перейти
#2. Информация об авторе коммита - его имя
#3. Дата создания коммита
#4. Комментарий, который описывает, что было сделано во время этого коммита

#Ветка - это указатель какого-то коммита

#При работе с гитом:
# Не делать коммит после каждого изменения, а только в случаях:
#1. Создан новый функционал
#2. Добавлен блок кода
#3. Исправлена ошибка в коде
#4. Сохранить код в конце рабочего дня

# Программы для работы с github:
# GitHub desctop
# Sourcetree
# GitKraken

#Функция - это структура, которую мы определяем сами.
# Функция начинается с ключевого слова def - название функции и двоеточие
# def test_function(): #описали функцию без параметров
#     print('Test')
#
# test_function() #вызвали функцию

# def test_function():
#     pass #pass - пустая операция, ничего не произойдет
# test_function()

#Task 1. Написать функцию, которая считает сумму в диапазоне от 1 до 10
# def summa():
#     a = 0
#     for i in range(1,11):
#         a += i
#     print(a)
# summa()

#Передача аргументов в функцию
# def add(a,b): #в скобках можно указывать несколько парметров через запятую, которые
#                 #должен указать программист в коде при вызове этой функции
#     return a+b #возвращает значение для печати и для хранения в функции
# print(add(1,2))

# def summa():
#     a = 0
#     for i in range(1,11):
#         a += i
#     return a
# print(summa())

# def add(a,b):
#     return a+b
# print(add(1,2,3)) #если указать слишком много или мало аргументов, то будет ошибка

# def add(a,b): return a+b
# print(add(a=2,b=4)) #можем менять порядок аргументов с помощью =
# print(add(b=2,a=4))

# def div(a,b): return a/b
# print(div(a=2,b=4))
# print(div(b=2,a=4))

# def add(a,b): return a+b #a,b - параметры
# add(1,2) #1,2 - аргументы

#Ключевые аргументы функции
# def add(a,b): - a,b - регулярные параметры
# def add(a=1,b=2): - a,b - ключевые параметры
# def add(a=1,b=2): return a+b #по умолчанию a,b равны 1 и 2
# print(add(4,5))
# print(add()) #так как ничего не указали, то берутся значения по умолчанию

# def mixed_function(a, b=2, c=3):
#     return a+b+c
# print(mixed_function(b=4,c=5)) #error
# print(mixed_function(1, b=4,c=5)) #10
# print(mixed_function(1)) #6

#Бесконечное количество регулярных и ключевых аргументов (*args, **kwargs)
# def many(*args,**kwargs): #вместо args, kwargs можно указывать любые другие фразы
# главное требование - наличие *, **
#     print(args) #будут распечатаны как кортеж
#     print(kwargs) #будут распечатаны как словарь
# many(1,2,3,4,5,name='Dmitry', job = 'Programmer')

#Желательно писать именно args, kwargs
# kwargs нельзя писать до args - сначала регулярные аргмунты*, затем ключевые**
# в ключевых аргументах не использовать рарезервированные фразы (print, sum, input, int,..)
# *можно использовать не только при объявлении функции, но и при вызове

#Область видимости функции (глобальные переменные)
# def fun1():
#     a = 1
#     b = 2
#     return a+b
# def fun2():
#     c = 3
#     return a+b+c #переменные a,b вышли за область видимости функции fun1
# print(fun1(),fun2())


# def fun1():
#     global a #значение а останется после окончания функции
#     a = 1
#     b = 2
#     return a+b
# def fun2():
#     c = 3
#     return a+c #переменная а вышла за область видимости, но все равно работает, так как
# #является глобальной
# print(fun1(),fun2())

#Вложенные функции
# def fun1(a,b):
#     def step3(x):
#         return x**3
#     return step3(a)+step3(b)
# print(fun1(4,5))

#Task 2. Високосный год - написать функцию
# def leap(year):
#     return year%4==0 and year%100 != 0 or year%400 == 0
# print(leap(int(input('Введите год: '))))

#Task 3. Написать функцию square с одним аргументом - сторона квадрата. Вывести
# 3 значения - периметр квадрата(4а), площадь(а*а) и диагональ (a^(1/2))
# def square(a):
#     return 4*a,a*a,a**(1/2)
# h = int(input('1 - периметр, 2 - площадь, 3 - диагональ'))
# print(square(float(input('Введите сторону квадрата: ')))[h])

#Task 4
# Написать функцию season,
# принимающую 1 аргумент — номер месяца (от 1 до 12),
# и возвращающую время года,
# которому этот месяц принадлежит (зима, весна, лето или осень).
# Номер месяца вводить с клавиатуры.
# def season(k):
#     if k == 12 or 1<=k<=2: print('Зима')
#     elif 3<=k<=5: print('Весна')
#     elif 6<=k<=8: print('Лето')
#     elif 9<=k<=11: print('Осень')
#     else: print('Неверное значение')
# n = int(input('Введите номер месяца: '))
# season(n)

#Task 6. Функция, которая проверяет, является ли число простым (делится на 1 и на себя)
# def chislo(a):
#     for i in range(2,abs(a//2)+1):
#         if a%i == 0: return 'Не является простым'
#     return 'Число простое'
# a = int(input('Введите число: '))
# print(chislo(a))

#Task 7. Есть список десяти случайных чисел. Функция должна найти среднее арифмитеческое
# этих чисел

# import random
# arr = [random.randint(1,100) for i in range(10)]
# print(arr)
# def average(h):
#     s = 0
#     for i in h:
#         s += i
#     print(s/len(h))
#
# average(arr)
# print(sum(arr)/len(arr))


#Рекурсивная функция - функция, которая вызывает сама себя
#Факториал: 7! = 1*2*3*4*5*6*7
# def factorial(n):
#     if n!= 0:
#         return n*factorial(n-1)
#     else:
#         return 1
# print(factorial(7))

# def add(a,b):
#     return a+b
# v = add(1,2)
# print(v)

# def func(x): return x
#
# a1 = func #занесли в переменную а1 функцию func без вызова (без скобок)
# a2 = a1
# print(a2(10)) #непрямой вызов функции
# print(id(a1),id(a2), id(func)) #все три функции имеют один id

# def sq(x): return x*x
# # sq = square #так лучше не делать, потому что в дальнейшем не будет работать sq
# square = sq #лучший вариант, square и sq будут работать в дальнейшем

#Анонимная функция (лямбда-функция)
# p = lambda x,y: x*y #присвоили анонимную функцию переменной p
# print(p(2,3)) #обратились к функции через переменную p
# print(type(p)) #p является функцией

# print((lambda x,y: x*y)(2,3)) #аналогично, но без переменной

# power = lambda x=1, y=2: x**y
# square = power
# print(square(5))

#Замыкание - вызов, создание и возвращение (return) функции внутри другой функции
# def fun_1(a):
#     def fun_2(b):
#         return a*b #использовали родительский аргумент a
#     return fun_2 #функция fun_1 возвращает fun_2 в качестве результата работы
# print(fun_1(3)(6)) #сначала задаем аргумент для fun_1, затем для fun_2 в других скобках
# three = fun_1(3)
# print(three(5)) #любое число в аргументе three() будет умножать на 3

#ДЕКОРАТОР ФУНКЦИИ

#Функция как аргумент другой функции
def func_1():
    print('Первая функция')
def func_2():
    print('Вторая функция')

def simple(fn): # функция, которая в качестве аргумента принимает другую функцию
    print('Старт')
    fn() #вызываем функцию-аргумент
    print('Стоп')

first = simple(func_1) #функция будет работать при объявлении ее в какую-то переменную
second = simple(func_2)

# simple(fn) - это и есть ДЕКОРАТОР ФУНКЦИИ, он принимает в качестве аргумента другую функцию

# def simple(fn): # декоратор функции
#     print('Старт')
#     fn()
#     print('Стоп')
#
# @simple #@simple - декоратор
# def func_1():
#     print('Первая функция')



# def info(fn):
#     def wrapper(arg):
#         print('Старт функции: ')
#         fn(arg)
#     return wrapper
#
# @info
# def sqrt1(num):
#     print(num**0.5)
# sqrt1(4)

#Task 1. Функция считает количество разрядов введенного числа (сколько цифр в числе) 12345618723927 - 14 цифр
# def info(a):
#     # 123//10 12//10 1//10 0
#     i = 0
#     while a>0:
#         a = a//10
#         i += 1
#     return i
#
# n = abs(int(input('Введите число: ')))
# print(info(n))

#ДЗ на вторник:
#Калькулятор с помощью пользовательских функций
# Функции: сложение, вычитание, умножение, деление (обработать исключение деления на ноль)
# Пятая операция тоже через функцию (для выхода из калькулятора)
# По желанию использовать декоратор
